// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/cloudfoundry-incubator/bits-service (interfaces: NoRedirectBlobstore)

package bitsgo_test

import (
	pegomock "github.com/petergtz/pegomock"
	io "io"
	"reflect"
)

type MockNoRedirectBlobstore struct {
	fail func(message string, callerSkip ...int)
}

func NewMockNoRedirectBlobstore() *MockNoRedirectBlobstore {
	return &MockNoRedirectBlobstore{fail: pegomock.GlobalFailHandler}
}

func (mock *MockNoRedirectBlobstore) Exists(path string) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMockNoRedirectBlobstore().")
	}
	params := []pegomock.Param{path}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Exists", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockNoRedirectBlobstore) Get(path string) (io.ReadCloser, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMockNoRedirectBlobstore().")
	}
	params := []pegomock.Param{path}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Get", params, []reflect.Type{reflect.TypeOf((*io.ReadCloser)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 io.ReadCloser
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(io.ReadCloser)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockNoRedirectBlobstore) Put(path string, src io.ReadSeeker) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMockNoRedirectBlobstore().")
	}
	params := []pegomock.Param{path, src}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Put", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockNoRedirectBlobstore) Delete(path string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMockNoRedirectBlobstore().")
	}
	params := []pegomock.Param{path}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Delete", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockNoRedirectBlobstore) DeleteDir(prefix string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMockNoRedirectBlobstore().")
	}
	params := []pegomock.Param{prefix}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteDir", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockNoRedirectBlobstore) VerifyWasCalledOnce() *VerifierNoRedirectBlobstore {
	return &VerifierNoRedirectBlobstore{mock, pegomock.Times(1), nil}
}

func (mock *MockNoRedirectBlobstore) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierNoRedirectBlobstore {
	return &VerifierNoRedirectBlobstore{mock, invocationCountMatcher, nil}
}

func (mock *MockNoRedirectBlobstore) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierNoRedirectBlobstore {
	return &VerifierNoRedirectBlobstore{mock, invocationCountMatcher, inOrderContext}
}

type VerifierNoRedirectBlobstore struct {
	mock                   *MockNoRedirectBlobstore
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierNoRedirectBlobstore) Exists(path string) *NoRedirectBlobstore_Exists_OngoingVerification {
	params := []pegomock.Param{path}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Exists", params)
	return &NoRedirectBlobstore_Exists_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type NoRedirectBlobstore_Exists_OngoingVerification struct {
	mock              *MockNoRedirectBlobstore
	methodInvocations []pegomock.MethodInvocation
}

func (c *NoRedirectBlobstore_Exists_OngoingVerification) GetCapturedArguments() string {
	path := c.GetAllCapturedArguments()
	return path[len(path)-1]
}

func (c *NoRedirectBlobstore_Exists_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierNoRedirectBlobstore) Get(path string) *NoRedirectBlobstore_Get_OngoingVerification {
	params := []pegomock.Param{path}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Get", params)
	return &NoRedirectBlobstore_Get_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type NoRedirectBlobstore_Get_OngoingVerification struct {
	mock              *MockNoRedirectBlobstore
	methodInvocations []pegomock.MethodInvocation
}

func (c *NoRedirectBlobstore_Get_OngoingVerification) GetCapturedArguments() string {
	path := c.GetAllCapturedArguments()
	return path[len(path)-1]
}

func (c *NoRedirectBlobstore_Get_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierNoRedirectBlobstore) Put(path string, src io.ReadSeeker) *NoRedirectBlobstore_Put_OngoingVerification {
	params := []pegomock.Param{path, src}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Put", params)
	return &NoRedirectBlobstore_Put_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type NoRedirectBlobstore_Put_OngoingVerification struct {
	mock              *MockNoRedirectBlobstore
	methodInvocations []pegomock.MethodInvocation
}

func (c *NoRedirectBlobstore_Put_OngoingVerification) GetCapturedArguments() (string, io.ReadSeeker) {
	path, src := c.GetAllCapturedArguments()
	return path[len(path)-1], src[len(src)-1]
}

func (c *NoRedirectBlobstore_Put_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []io.ReadSeeker) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]io.ReadSeeker, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(io.ReadSeeker)
		}
	}
	return
}

func (verifier *VerifierNoRedirectBlobstore) Delete(path string) *NoRedirectBlobstore_Delete_OngoingVerification {
	params := []pegomock.Param{path}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Delete", params)
	return &NoRedirectBlobstore_Delete_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type NoRedirectBlobstore_Delete_OngoingVerification struct {
	mock              *MockNoRedirectBlobstore
	methodInvocations []pegomock.MethodInvocation
}

func (c *NoRedirectBlobstore_Delete_OngoingVerification) GetCapturedArguments() string {
	path := c.GetAllCapturedArguments()
	return path[len(path)-1]
}

func (c *NoRedirectBlobstore_Delete_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierNoRedirectBlobstore) DeleteDir(prefix string) *NoRedirectBlobstore_DeleteDir_OngoingVerification {
	params := []pegomock.Param{prefix}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteDir", params)
	return &NoRedirectBlobstore_DeleteDir_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type NoRedirectBlobstore_DeleteDir_OngoingVerification struct {
	mock              *MockNoRedirectBlobstore
	methodInvocations []pegomock.MethodInvocation
}

func (c *NoRedirectBlobstore_DeleteDir_OngoingVerification) GetCapturedArguments() string {
	prefix := c.GetAllCapturedArguments()
	return prefix[len(prefix)-1]
}

func (c *NoRedirectBlobstore_DeleteDir_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
